import {
  to = segment_reverse_etl_model.id-vVqAWbwk18jrnreSy8pdP2
  id = "vVqAWbwk18jrnreSy8pdP2"
}

resource "segment_reverse_etl_model" "id-vVqAWbwk18jrnreSy8pdP2" {
  description             = "Programatically generated rETL model that is associated with an Engage rETL audience"
  enabled                 = true
  name                    = "Test"
  query                   = "WITH ID_GRAPH AS (\n    SELECT updates.segment_id, updates.canonical_segment_id\n    FROM \"ACOGBILL_ASAN_POC\".\"MIGRATED_LINK_SPACE\".ID_GRAPH_UPDATES AS updates\n    LEFT JOIN \"ACOGBILL_ASAN_POC\".\"MIGRATED_LINK_SPACE\".ID_GRAPH_UPDATES AS updates2 ON updates2.segment_id = updates.canonical_segment_id\n        AND CAST(updates.uuid_ts AS DATETIME) < DATEADD(HOUR, 2, updates2.UUID_TS)\n        AND updates2.canonical_segment_id <> updates2.segment_id\n        AND updates2.canonical_segment_id <> updates.canonical_segment_id\n), PROFILE_TRAITS AS (\n    WITH last_profile_traits_updates AS (\n        SELECT *, ROW_NUMBER() OVER(PARTITION BY segment_id ORDER BY CASE WHEN seq IS NULL THEN '0' ELSE seq END DESC) AS last_record\n        FROM \"ACOGBILL_ASAN_POC\".\"MIGRATED_LINK_SPACE\".PROFILE_TRAITS_UPDATES AS updates\n    )\n    SELECT DISTINCT COALESCE(id_graph.canonical_segment_id,updates.segment_id) AS canonical_segment_id\n    FROM last_profile_traits_updates AS updates\n    FULL OUTER JOIN ID_GRAPH AS id_graph ON id_graph.segment_id = updates.segment_id\n    WHERE updates.last_record = 1\n), EXTERNAL_ID_MAPPING AS (\n    SELECT COALESCE(id_graph.canonical_segment_id,ids.segment_id) AS canonical_segment_id, ids.external_id_type, ids.external_id_value\n    FROM \"ACOGBILL_ASAN_POC\".\"MIGRATED_LINK_SPACE\".EXTERNAL_ID_MAPPING_UPDATES AS ids\n    LEFT JOIN ID_GRAPH AS id_graph ON id_graph.segment_id = ids.segment_id\n), ECG_1 AS (\n\tWITH filtered_query AS (\n\t\tSELECT A.\"CANONICAL_SEGMENT_ID\" AS \"A_CANONICAL_SEGMENT_ID\", B.\"DOMAINUSER_ID\" AS \"B_DOMAINUSER_ID\"\n\t\tFROM \"ACOGBILL_ASAN_POC\".\"LINKED_DATA\".\"DOMAIN_USERS\" B\n\t\tINNER JOIN EXTERNAL_ID_MAPPING A ON A.\"EXTERNAL_ID_VALUE\" = B.\"USER_ID\" AND A.\"EXTERNAL_ID_TYPE\" = 'user_id'\n\t)\n\tSELECT * FROM filtered_query\n), ECG_1_SEGMENT_ID AS (\n\tSELECT \"A_CANONICAL_SEGMENT_ID\" AS \"CANONICAL_SEGMENT_ID\" FROM ECG_1 GROUP BY \"A_CANONICAL_SEGMENT_ID\"\n), PROFILE_FILTER AS (\n\tSELECT CANONICAL_SEGMENT_ID FROM PROFILE_TRAITS PT\n\tWHERE (CANONICAL_SEGMENT_ID IN (SELECT CANONICAL_SEGMENT_ID FROM ECG_1_SEGMENT_ID))\n), ECG_1_FILTERED AS (\n\tSELECT * FROM ECG_1 WHERE \"A_CANONICAL_SEGMENT_ID\" IN (SELECT CANONICAL_SEGMENT_ID FROM PROFILE_FILTER)\n)\nSELECT DISTINCT * FROM (\n\tSELECT CANONICAL_SEGMENT_ID as matchId\n\tFROM PROFILE_FILTER\n\tUNION ALL\n\tSELECT CONCAT_WS(':', \"A_CANONICAL_SEGMENT_ID\", '1', REPLACE(\"B_DOMAINUSER_ID\", ':', '::')) as matchId\n\tFROM ECG_1_FILTERED\n)"
  query_identifier_column = "matchId"
  source_id               = "mHBsfncMxDxiQasdN5PRA3"
}