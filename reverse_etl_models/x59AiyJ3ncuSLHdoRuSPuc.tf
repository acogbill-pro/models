import {
  to = segment_reverse_etl_model.id-x59AiyJ3ncuSLHdoRuSPuc
  id = "x59AiyJ3ncuSLHdoRuSPuc"
}

resource "segment_reverse_etl_model" "id-x59AiyJ3ncuSLHdoRuSPuc" {
  description             = "Programatically generated rETL model that is associated with an Engage rETL audience"
  enabled                 = true
  name                    = "Linked Audience rETL Model"
  query                   = "WITH ID_GRAPH AS (\n    SELECT \"SEGMENT_ID\", \"CANONICAL_SEGMENT_ID\" FROM (\n        SELECT updates.\"SEGMENT_ID\", updates.\"CANONICAL_SEGMENT_ID\",\n        row_number() OVER(PARTITION BY updates.\"SEGMENT_ID\"\n            ORDER BY updates2.\"CANONICAL_SEGMENT_ID\" IS NOT NULL, updates.\"SEQ\" DESC NULLS FIRST) AS rn\n        FROM \"ACOGBILL_DEMO\".\"COGBILL_MARKETING_PROD\".\"ID_GRAPH_UPDATES\" AS updates\n        LEFT JOIN \"ACOGBILL_DEMO\".\"COGBILL_MARKETING_PROD\".\"ID_GRAPH_UPDATES\" AS updates2 ON updates2.\"SEGMENT_ID\" = updates.\"CANONICAL_SEGMENT_ID\"\n            AND CAST(updates.\"UUID_TS\" AS TIMESTAMP) < (CAST(updates2.\"UUID_TS\" AS TIMESTAMP) + INTERVAL '2 hour')\n            AND updates2.\"CANONICAL_SEGMENT_ID\" <> updates2.\"SEGMENT_ID\"\n            AND updates2.\"CANONICAL_SEGMENT_ID\" <> updates.\"CANONICAL_SEGMENT_ID\"\n    ) AS ORDERED_ID_GRAPH WHERE rn = 1\n), EXTERNAL_ID_MAPPING AS (\n    SELECT \"CANONICAL_SEGMENT_ID\", \"EXTERNAL_ID_TYPE\", \"EXTERNAL_ID_VALUE\" FROM (\n        SELECT COALESCE(id_graph.\"CANONICAL_SEGMENT_ID\", ids.\"SEGMENT_ID\") AS \"CANONICAL_SEGMENT_ID\", ids.\"EXTERNAL_ID_TYPE\", ids.\"EXTERNAL_ID_VALUE\",\n        ROW_NUMBER() OVER (PARTITION BY ids.\"EXTERNAL_ID_HASH\" ORDER BY ids.\"TIMESTAMP\" DESC) AS rn\n        FROM \"ACOGBILL_DEMO\".\"COGBILL_MARKETING_PROD\".\"EXTERNAL_ID_MAPPING_UPDATES\" AS ids\n        LEFT JOIN ID_GRAPH AS id_graph ON id_graph.\"SEGMENT_ID\" = ids.\"SEGMENT_ID\"\n\t\tWHERE \"EXTERNAL_ID_TYPE\" IN ('android.idfa','email','ios.idfa','user_id')\n    ) AS ORDERED_EXTERNAL_ID_MAPPING WHERE rn = 1\n), PROFILE_TRAITS AS (\n    SELECT DISTINCT \"CANONICAL_SEGMENT_ID\" FROM EXTERNAL_ID_MAPPING\n), ECG_1 AS (\n\tWITH filtered_query AS (\n\t\tSELECT A.\"CANONICAL_SEGMENT_ID\" AS \"A_CANONICAL_SEGMENT_ID\", B.\"ID\" AS \"B_ID\"\n\t\tFROM \"ACOGBILL_DEMO\".\"PERSONAS_MARKETING_PROD\".\"USERS\" B\n\t\tINNER JOIN EXTERNAL_ID_MAPPING A ON A.\"EXTERNAL_ID_TYPE\" = 'email' AND A.\"EXTERNAL_ID_VALUE\" = CAST(B.\"EMAIL\" AS VARCHAR)\n\t)\n\tSELECT * FROM filtered_query\n), ECG_1_SEGMENT_ID AS (\n\tSELECT \"A_CANONICAL_SEGMENT_ID\" AS \"CANONICAL_SEGMENT_ID\" FROM ECG_1 GROUP BY \"A_CANONICAL_SEGMENT_ID\"\n), PROFILE_FILTER AS (\n\tSELECT \"CANONICAL_SEGMENT_ID\" FROM PROFILE_TRAITS PT\n\tWHERE (\"CANONICAL_SEGMENT_ID\" IN (SELECT \"CANONICAL_SEGMENT_ID\" FROM ECG_1_SEGMENT_ID))\n), ECG_1_FILTERED AS (\n\tSELECT * FROM ECG_1 ECG INNER JOIN PROFILE_FILTER PF ON ECG.\"A_CANONICAL_SEGMENT_ID\" = PF.\"CANONICAL_SEGMENT_ID\"\n)\nSELECT DISTINCT * FROM (\n\tSELECT \"CANONICAL_SEGMENT_ID\" as \"MATCHID\", \"CANONICAL_SEGMENT_ID\"\n\tFROM PROFILE_FILTER\n\tUNION ALL\n\tSELECT \"A_CANONICAL_SEGMENT_ID\" || ':' ||  '1' || ':' || REPLACE(CAST(\"B_ID\" AS VARCHAR), ':', '::') as \"MATCHID\", \"A_CANONICAL_SEGMENT_ID\" as CANONICAL_SEGMENT_ID\n\tFROM ECG_1_FILTERED WHERE \"B_ID\" IS NOT NULL\n) AS DEDUPED_PROJECTIONS"
  query_identifier_column = "matchId"
  source_id               = "wLoTFxk9DuredsGx6ECmgJ"
}