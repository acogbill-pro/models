import {
  to = segment_reverse_etl_model.id-n3ArBK68wJtUi6vaX5145v
  id = "n3ArBK68wJtUi6vaX5145v"
}

resource "segment_reverse_etl_model" "id-n3ArBK68wJtUi6vaX5145v" {
  description             = "Programatically generated rETL model that is associated with an Engage rETL audience"
  enabled                 = true
  name                    = "Non-Enterprise Pricing Page Visitors"
  query                   = "WITH ID_GRAPH AS (\n    SELECT updates.segment_id, updates.canonical_segment_id\n    FROM \"SOLUTIONS_SANDBOX\".\"MARKETING_EAST\".ID_GRAPH_UPDATES AS updates\n    LEFT JOIN \"SOLUTIONS_SANDBOX\".\"MARKETING_EAST\".ID_GRAPH_UPDATES AS updates2 ON updates2.segment_id = updates.canonical_segment_id\n        AND CAST(updates.uuid_ts AS DATETIME) < DATEADD(HOUR, 2, updates2.UUID_TS)\n        AND updates2.canonical_segment_id <> updates2.segment_id\n        AND updates2.canonical_segment_id <> updates.canonical_segment_id\n), PROFILE_TRAITS AS (\n    WITH last_profile_traits_updates AS (\n        SELECT *, ROW_NUMBER() OVER(PARTITION BY segment_id ORDER BY CASE WHEN seq IS NULL THEN '0' ELSE seq END DESC) AS last_record\n        FROM \"SOLUTIONS_SANDBOX\".\"MARKETING_EAST\".PROFILE_TRAITS_UPDATES AS updates\n    )\n    SELECT DISTINCT COALESCE(id_graph.canonical_segment_id,updates.segment_id) AS canonical_segment_id,\n    FROM last_profile_traits_updates AS updates\n    FULL OUTER JOIN ID_GRAPH AS id_graph ON id_graph.segment_id = updates.segment_id\n    WHERE updates.last_record = 1\n), EXTERNAL_ID_MAPPING AS (\n    SELECT COALESCE(id_graph.canonical_segment_id,ids.segment_id) AS canonical_segment_id, ids.external_id_type, ids.external_id_value\n    FROM \"SOLUTIONS_SANDBOX\".\"MARKETING_EAST\".EXTERNAL_ID_MAPPING_UPDATES AS ids\n    LEFT JOIN ID_GRAPH AS id_graph ON id_graph.segment_id = ids.segment_id\n), filtered_query AS (\n  SELECT A.\"CANONICAL_SEGMENT_ID\" AS \"A_CANONICAL_SEGMENT_ID\", B.\"ID\" AS \"B_ID\", C.\"ID\" AS \"C_ID\"\n  FROM \"SOLUTIONS_SANDBOX\".\"MARKETING_EAST\".\"CARTS\" C\n  INNER JOIN \"SOLUTIONS_SANDBOX\".\"MARKETING_EAST\".\"AFFILIATE_ACCOUNT\" B ON B.\"PARENT_ACCOUNT_ID\" = C.\"ACCOUNT_ID\"\n  INNER JOIN EXTERNAL_ID_MAPPING A ON A.\"EXTERNAL_ID_VALUE\" = B.\"EMAIL_ID\" AND A.\"EXTERNAL_ID_TYPE\" = 'email'\n  INNER JOIN PROFILE_TRAITS PT ON PT.\"CANONICAL_SEGMENT_ID\" = A.\"CANONICAL_SEGMENT_ID\"\n  WHERE (and AND (B.\"TIER\" != 'ENTERPRISE') AND (C.\"NAME\" LIKE '%PRICING%' ESCAPE '\\\\'))\n), B_matches AS (\n  SELECT * FROM filtered_query WHERE \"B_ID\" in (\n      SELECT \"B_ID\" FROM (SELECT \"B_ID\", \"C_ID\" FROM filtered_query GROUP BY \"B_ID\", \"C_ID\") GROUP BY \"B_ID\" HAVING COUNT(*) >= 2\n  )\n)\nSELECT DISTINCT CONCAT_WS(':', REPLACE(\"A_CANONICAL_SEGMENT_ID\", ':', '::'), REPLACE(\"B_ID\", ':', '::'), REPLACE(\"C_ID\", ':', '::')) as matchId\nFROM B_matches\nUNION ALL\nSELECT DISTINCT CONCAT_WS(':', REPLACE(\"A_CANONICAL_SEGMENT_ID\", ':', '::'), REPLACE(\"B_ID\", ':', '::')) as matchId\nFROM B_matches\nUNION ALL\nSELECT DISTINCT CONCAT_WS(':', REPLACE(\"A_CANONICAL_SEGMENT_ID\", ':', '::')) as matchId\nFROM B_matches"
  query_identifier_column = "matchId"
  source_id               = "5nZ2D9s879h4Xc6YQhwh5v"
}