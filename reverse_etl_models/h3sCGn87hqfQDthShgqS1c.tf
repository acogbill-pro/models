import {
  to = segment_reverse_etl_model.id-h3sCGn87hqfQDthShgqS1c
  id = "h3sCGn87hqfQDthShgqS1c"
}

resource "segment_reverse_etl_model" "id-h3sCGn87hqfQDthShgqS1c" {
  description             = "Programatically generated rETL model that is associated with an Engage rETL audience"
  enabled                 = true
  name                    = "Use Case 1 Repeat 2"
  query                   = "WITH ID_GRAPH AS (\n    SELECT updates.segment_id, updates.canonical_segment_id\n    FROM \"ACOGBILL_ASAN_POC\".\"PROFILE_SYNC\".ID_GRAPH_UPDATES AS updates\n    LEFT JOIN \"ACOGBILL_ASAN_POC\".\"PROFILE_SYNC\".ID_GRAPH_UPDATES AS updates2 ON updates2.segment_id = updates.canonical_segment_id\n        AND CAST(updates.uuid_ts AS DATETIME) < DATEADD(HOUR, 2, updates2.UUID_TS)\n        AND updates2.canonical_segment_id <> updates2.segment_id\n        AND updates2.canonical_segment_id <> updates.canonical_segment_id\n), PROFILE_TRAITS AS (\n    WITH last_profile_traits_updates AS (\n        SELECT *, ROW_NUMBER() OVER(PARTITION BY segment_id ORDER BY CASE WHEN seq IS NULL THEN '0' ELSE seq END DESC) AS last_record\n        FROM \"ACOGBILL_ASAN_POC\".\"PROFILE_SYNC\".PROFILE_TRAITS_UPDATES AS updates\n    )\n    SELECT DISTINCT COALESCE(id_graph.canonical_segment_id,updates.segment_id) AS canonical_segment_id\n    FROM last_profile_traits_updates AS updates\n    FULL OUTER JOIN ID_GRAPH AS id_graph ON id_graph.segment_id = updates.segment_id\n    WHERE updates.last_record = 1\n), EXTERNAL_ID_MAPPING AS (\n    SELECT COALESCE(id_graph.canonical_segment_id,ids.segment_id) AS canonical_segment_id, ids.external_id_type, ids.external_id_value\n    FROM \"ACOGBILL_ASAN_POC\".\"PROFILE_SYNC\".EXTERNAL_ID_MAPPING_UPDATES AS ids\n    LEFT JOIN ID_GRAPH AS id_graph ON id_graph.segment_id = ids.segment_id\n), ECG_1 AS (\n\tWITH filtered_query AS (\n\t\tSELECT A.\"CANONICAL_SEGMENT_ID\" AS \"A_CANONICAL_SEGMENT_ID\", B.\"DOMAINUSER_ID\" AS \"B_DOMAINUSER_ID\", B.\"DU_EMAIL\" AS \"B_DU_EMAIL\", C.\"ENTITY_ID\" AS \"C_ENTITY_ID\", C.\"IS_TRIALING\" AS \"C_IS_TRIALING\", C.\"IS_PAID\" AS \"C_IS_PAID\", D.\"ENTITY_ID\" AS \"D_ENTITY_ID\", D.\"PLAN_SEATS\" AS \"D_PLAN_SEATS\", D.\"PLAN_TIER\" AS \"D_PLAN_TIER\", E.\"DOMAIN_ID\" AS \"E_DOMAIN_ID\", E.\"DOMAIN_NAME\" AS \"E_DOMAIN_NAME\", E.\"SFDC_ACCOUNT_ID\" AS \"E_SFDC_ACCOUNT_ID\"\n\t\tFROM \"ACOGBILL_ASAN_POC\".\"LINKED_DATA\".\"DOMAINS\" E\n\t\tINNER JOIN \"ACOGBILL_ASAN_POC\".\"LINKED_DATA\".\"ENTITIES\" D ON D.\"DOMAIN_ID\" = E.\"DOMAIN_ID\"\n\t\tINNER JOIN \"ACOGBILL_ASAN_POC\".\"LINKED_DATA\".\"ENTITY_USERS\" C ON C.\"ENTITY_ID\" = D.\"ENTITY_ID\"\n\t\tINNER JOIN \"ACOGBILL_ASAN_POC\".\"LINKED_DATA\".\"DOMAIN_USERS\" B ON B.\"DOMAINUSER_ID\" = C.\"DOMAINUSER_ID\"\n\t\tINNER JOIN EXTERNAL_ID_MAPPING A ON A.\"EXTERNAL_ID_TYPE\" = 'user_id' AND A.\"EXTERNAL_ID_VALUE\" = TO_VARCHAR(B.\"USER_ID\")\n\t\tWHERE ((D.\"PLAN_TIER\" = 'enterprise') and (D.\"PLAN_SEATS\" > 500))\n\t)\n\tSELECT * FROM filtered_query\n), ECG_1_SEGMENT_ID AS (\n\tSELECT \"A_CANONICAL_SEGMENT_ID\" AS \"CANONICAL_SEGMENT_ID\" FROM ECG_1 GROUP BY \"A_CANONICAL_SEGMENT_ID\"\n), PROFILE_FILTER AS (\n\tSELECT CANONICAL_SEGMENT_ID FROM PROFILE_TRAITS PT\n\tWHERE (CANONICAL_SEGMENT_ID IN (SELECT CANONICAL_SEGMENT_ID FROM ECG_1_SEGMENT_ID))\n), ECG_1_FILTERED AS (\n\tSELECT * FROM ECG_1 WHERE \"A_CANONICAL_SEGMENT_ID\" IN (SELECT CANONICAL_SEGMENT_ID FROM PROFILE_FILTER)\n)\nSELECT DISTINCT * FROM (\n\tSELECT CANONICAL_SEGMENT_ID as matchId, NULL AS \"1_DU_EMAIL\", NULL AS \"2_IS_TRIALING\", NULL AS \"2_IS_PAID\", NULL AS \"3_PLAN_SEATS\", NULL AS \"3_PLAN_TIER\", NULL AS \"4_DOMAIN_NAME\", NULL AS \"4_SFDC_ACCOUNT_ID\"\n\tFROM PROFILE_FILTER\n\tUNION ALL\n\tSELECT CONCAT_WS(':', \"A_CANONICAL_SEGMENT_ID\", '4', REPLACE(\"B_DOMAINUSER_ID\", ':', '::'), REPLACE(\"C_ENTITY_ID\", ':', '::'), REPLACE(\"D_ENTITY_ID\", ':', '::'), REPLACE(\"E_DOMAIN_ID\", ':', '::')) as matchId, \"B_DU_EMAIL\", \"C_IS_TRIALING\", \"C_IS_PAID\", \"D_PLAN_SEATS\", \"D_PLAN_TIER\", \"E_DOMAIN_NAME\", \"E_SFDC_ACCOUNT_ID\"\n\tFROM ECG_1_FILTERED\n\tUNION ALL\n\tSELECT CONCAT_WS(':', \"A_CANONICAL_SEGMENT_ID\", '3', REPLACE(\"B_DOMAINUSER_ID\", ':', '::'), REPLACE(\"C_ENTITY_ID\", ':', '::'), REPLACE(\"D_ENTITY_ID\", ':', '::')) as matchId, \"B_DU_EMAIL\", \"C_IS_TRIALING\", \"C_IS_PAID\", \"D_PLAN_SEATS\", \"D_PLAN_TIER\", NULL, NULL\n\tFROM ECG_1_FILTERED\n\tUNION ALL\n\tSELECT CONCAT_WS(':', \"A_CANONICAL_SEGMENT_ID\", '2', REPLACE(\"B_DOMAINUSER_ID\", ':', '::'), REPLACE(\"C_ENTITY_ID\", ':', '::')) as matchId, \"B_DU_EMAIL\", \"C_IS_TRIALING\", \"C_IS_PAID\", NULL, NULL, NULL, NULL\n\tFROM ECG_1_FILTERED\n\tUNION ALL\n\tSELECT CONCAT_WS(':', \"A_CANONICAL_SEGMENT_ID\", '1', REPLACE(\"B_DOMAINUSER_ID\", ':', '::')) as matchId, \"B_DU_EMAIL\", NULL, NULL, NULL, NULL, NULL, NULL\n\tFROM ECG_1_FILTERED\n)"
  query_identifier_column = "matchId"
  source_id               = "dBh2MaQ7EsMN2WpewaTsdQ"
}